import React, { useEffect, useState } from "react";
import PropTypes from "prop-types";
import Head from "next/head";
import Link from "next/link";
import { useTheme } from "next-themes";
import { getAllSuperClusters } from "../adapters/superclusters";

const ThemeChanger = () => {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();
  // When mounted on client, now we can show the UI
  useEffect(() => setMounted(true), []);
  if (!mounted) return null;
  return (
    <div className="absolute top-8 right-8">
      <button
        type="button"
        className="rounded-full m-4 w-12 h-12 "
        onClick={() => setTheme("light")}
      >
        {theme === "light" ? (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
              clipRule="evenodd"
            />
          </svg>
        ) : (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            />
          </svg>
        )}
      </button>
      <button
        type="button"
        className="rounded-full m-4 w-12 h-12"
        onClick={() => setTheme("dark")}
      >
        {theme === "dark" ? (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        ) : (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            />
          </svg>
        )}
      </button>
    </div>
  );
};

export default function Home({ superclusters }) {
  return (
    <div className="dark:bg-black min-h-screen">
      <Head>
        <title>CLUSTER</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className="text-blue-700 text-center text-6xl uppercase pt-8 font-bold">
        ClusterðŸŒŒ
      </h1>
      {ThemeChanger()}
      <div className="px-8">
        <h1 className="text-6xl mb-8">Links</h1>
        <ul>
          {superclusters.map((supercluster) => (
            <Link href={`/${supercluster.slug}`} key={supercluster.id} passHref>
              <li className="text-3xl py-2 cursor-pointer hover:translate-x-2">
                {supercluster.title}
              </li>
            </Link>
          ))}
        </ul>
      </div>
    </div>
  );
}

Home.propTypes = {
  superclusters: PropTypes.arrayOf(
    PropTypes.shape({
      title: PropTypes.string,
    })
  ),
};

Home.defaultProps = {
  superclusters: [],
};

export const getStaticProps = async () => {
  const superclusters = await getAllSuperClusters()
    .then((data) => data)
    .catch((err) => err);
  return {
    props: { superclusters },
  };
};
